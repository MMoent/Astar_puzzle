This is a simple python program using A* algorithm to solve the N*M-1 puzzle problem.

The program generates random N*M puzzles, then use inversion to determine whether the given puzzle is solvable.

When both N and M are greater than 4, the solving time will increase dramatically (seems more than 10 min based on the complexity). Otherwise the solving time will be less than 1 min.

(Sorry for the late, cuz I got a fever after being vaccinated.)

-----------------------Examples of results--------------------------
1.
--------------------------------------------------------------------
	Specify the number of rows: 2
	Specify the number of columns: 2
	The 2 * 2 puzzle is: 
	 [[2 3]
	 [1 0]]
	The goal is: 
	 [[1 2]
	 [3 0]]
	Solved. 4 steps. 0.0018s
	[[2 3]
	 [1 0]]
	--------------------
	[[2 0]
	 [1 3]]
	--------------------
	[[0 2]
	 [1 3]]
	--------------------
	[[1 2]
	 [0 3]]
	--------------------
	[[1 2]
	 [3 0]]
	--------------------

	Process finished with exit code 0
--------------------------------------------------------------------

2.
--------------------------------------------------------------------
	Specify the number of rows: 2
	Specify the number of columns: 3
	The 2 * 3 puzzle is: 
	 [[2 1 0]
	 [4 3 5]]
	The goal is: 
	 [[1 2 3]
	 [4 5 0]]
	Solved. 17 steps. 0.0405s
	[[2 1 0]
	 [4 3 5]]
	--------------------
	[[2 0 1]
	 [4 3 5]]
	--------------------
	[[2 3 1]
	 [4 0 5]]
	--------------------
	[[2 3 1]
	 [4 5 0]]
	--------------------
	[[2 3 0]
	 [4 5 1]]
	--------------------
	[[2 0 3]
	 [4 5 1]]
	--------------------
	[[0 2 3]
	 [4 5 1]]
	--------------------
	[[4 2 3]
	 [0 5 1]]
	--------------------
	[[4 2 3]
	 [5 0 1]]
	--------------------
	[[4 2 3]
	 [5 1 0]]
	--------------------
	[[4 2 0]
	 [5 1 3]]
	--------------------
	[[4 0 2]
	 [5 1 3]]
	--------------------
	[[4 1 2]
	 [5 0 3]]
	--------------------
	[[4 1 2]
	 [0 5 3]]
	--------------------
	[[0 1 2]
	 [4 5 3]]
	--------------------
	[[1 0 2]
	 [4 5 3]]
	--------------------
	[[1 2 0]
	 [4 5 3]]
	--------------------
	[[1 2 3]
	 [4 5 0]]
	--------------------

	Process finished with exit code 0
--------------------------------------------------------------------

3.
--------------------------------------------------------------------
	Specify the number of rows: 3
	Specify the number of columns: 2
	The 3 * 2 puzzle is: 
	 [[2 5]
	 [4 1]
	 [3 0]]
	The goal is: 
	 [[1 2]
	 [3 4]
	 [5 0]]
	Solved. 12 steps. 0.0167s
	[[2 5]
	 [4 1]
	 [3 0]]
	--------------------
	[[2 5]
	 [4 1]
	 [0 3]]
	--------------------
	[[2 5]
	 [0 1]
	 [4 3]]
	--------------------
	[[2 5]
	 [1 0]
	 [4 3]]
	--------------------
	[[2 0]
	 [1 5]
	 [4 3]]
	--------------------
	[[0 2]
	 [1 5]
	 [4 3]]
	--------------------
	[[1 2]
	 [0 5]
	 [4 3]]
	--------------------
	[[1 2]
	 [4 5]
	 [0 3]]
	--------------------
	[[1 2]
	 [4 5]
	 [3 0]]
	--------------------
	[[1 2]
	 [4 0]
	 [3 5]]
	--------------------
	[[1 2]
	 [0 4]
	 [3 5]]
	--------------------
	[[1 2]
	 [3 4]
	 [0 5]]
	--------------------
	[[1 2]
	 [3 4]
	 [5 0]]
	--------------------

	Process finished with exit code 0
--------------------------------------------------------------------

4.
--------------------------------------------------------------------
	Specify the number of rows: 3
	Specify the number of columns: 3
	The 3 * 3 puzzle is: 
	 [[2 3 7]
	 [8 0 5]
	 [6 1 4]]
	The goal is: 
	 [[1 2 3]
	 [4 5 6]
	 [7 8 0]]
	Solved. 24 steps. 5.0730s
	[[2 3 7]
	 [8 0 5]
	 [6 1 4]]
	--------------------
	[[2 3 7]
	 [8 1 5]
	 [6 0 4]]
	--------------------
	[[2 3 7]
	 [8 1 5]
	 [0 6 4]]
	--------------------
	[[2 3 7]
	 [0 1 5]
	 [8 6 4]]
	--------------------
	[[2 3 7]
	 [1 0 5]
	 [8 6 4]]
	--------------------
	[[2 3 7]
	 [1 5 0]
	 [8 6 4]]
	--------------------
	[[2 3 0]
	 [1 5 7]
	 [8 6 4]]
	--------------------
	[[2 0 3]
	 [1 5 7]
	 [8 6 4]]
	--------------------
	[[0 2 3]
	 [1 5 7]
	 [8 6 4]]
	--------------------
	[[1 2 3]
	 [0 5 7]
	 [8 6 4]]
	--------------------
	[[1 2 3]
	 [5 0 7]
	 [8 6 4]]
	--------------------
	[[1 2 3]
	 [5 7 0]
	 [8 6 4]]
	--------------------
	[[1 2 3]
	 [5 7 4]
	 [8 6 0]]
	--------------------
	[[1 2 3]
	 [5 7 4]
	 [8 0 6]]
	--------------------
	[[1 2 3]
	 [5 7 4]
	 [0 8 6]]
	--------------------
	[[1 2 3]
	 [0 7 4]
	 [5 8 6]]
	--------------------
	[[1 2 3]
	 [7 0 4]
	 [5 8 6]]
	--------------------
	[[1 2 3]
	 [7 4 0]
	 [5 8 6]]
	--------------------
	[[1 2 3]
	 [7 4 6]
	 [5 8 0]]
	--------------------
	[[1 2 3]
	 [7 4 6]
	 [5 0 8]]
	--------------------
	[[1 2 3]
	 [7 4 6]
	 [0 5 8]]
	--------------------
	[[1 2 3]
	 [0 4 6]
	 [7 5 8]]
	--------------------
	[[1 2 3]
	 [4 0 6]
	 [7 5 8]]
	--------------------
	[[1 2 3]
	 [4 5 6]
	 [7 0 8]]
	--------------------
	[[1 2 3]
	 [4 5 6]
	 [7 8 0]]
	--------------------

	Process finished with exit code 0
--------------------------------------------------------------------

5.
--------------------------------------------------------------------
	Specify the number of rows: 3
	Specify the number of columns: 3
	The 3 * 3 puzzle is: 
	 [[0 8 4]
	 [7 2 1]
	 [6 5 3]]
	The goal is: 
	 [[1 2 3]
	 [4 5 6]
	 [7 8 0]]
	unsolvable

	Process finished with exit code 0
--------------------------------------------------------------------


